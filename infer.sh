#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([base],[],[The Roboflow Infer host; set for On-Device Inference],["https://infer.roboflow.com"])
# ARG_OPTIONAL_SINGLE([confidence],[c],[The minimum threshold for the model to output box predictions.],[50])
# ARG_OPTIONAL_SINGLE([overlap],[o],[The maximum amount two predicted boxes of the same class can intersect before being combined.],[50])
# ARG_OPTIONAL_SINGLE([stroke],[s],[The thickness of the predicted bounding boxes.],[5])
# ARG_OPTIONAL_BOOLEAN([labels],[l],[Print the class names])
# ARG_OPTIONAL_SINGLE([fps],[f],[The number of frames per second (2 means sample 1 frame per second of video_in).],[12])
# ARG_OPTIONAL_SINGLE([tmp],[t],[The tmp directory; must be writable.],["/tmp"])
# ARG_OPTIONAL_SINGLE([retries],[r],[The number of times to retry a failed inference.],[3])
# ARG_OPTIONAL_SINGLE([parallel],[p],[The number of concurrent frames to send to the model.],[8])
# ARG_POSITIONAL_SINGLE([model],[The Roboflow model to use for inference (required).])
# ARG_POSITIONAL_SINGLE([video_in],[The input video file (required).])
# ARG_POSITIONAL_SINGLE([video_out],[The output video file (required).])
# ARG_DEFAULTS_POS()
# ARG_HELP([<Use a Roboflow Trained model to make predictions on a video.>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='coslftrph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_model=
_arg_video_in=
_arg_video_out=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_base="https://infer.roboflow.com"
_arg_confidence="50"
_arg_overlap="50"
_arg_stroke="5"
_arg_labels="off"
_arg_fps="12"
_arg_tmp="/tmp"
_arg_retries="3"
_arg_parallel="8"


print_help()
{
	printf '%s\n' "<Use a Roboflow Trained model to make predictions on a video.>"
	printf 'Usage: %s [--base <arg>] [-c|--confidence <arg>] [-o|--overlap <arg>] [-s|--stroke <arg>] [-l|--(no-)labels] [-f|--fps <arg>] [-t|--tmp <arg>] [-r|--retries <arg>] [-p|--parallel <arg>] [-h|--help] <model> <video_in> <video_out>\n' "$0"
	printf '\t%s\n' "<model>: The Roboflow model to use for inference (required)."
	printf '\t%s\n' "<video_in>: The input video file (required)."
	printf '\t%s\n' "<video_out>: The output video file (required)."
	printf '\t%s\n' "--base: The Roboflow Infer host; set for On-Device Inference (default: '"https://infer.roboflow.com"')"
	printf '\t%s\n' "-c, --confidence: The minimum threshold for the model to output box predictions. (default: '50')"
	printf '\t%s\n' "-o, --overlap: The maximum amount two predicted boxes of the same class can intersect before being combined. (default: '50')"
	printf '\t%s\n' "-s, --stroke: The thickness of the predicted bounding boxes. (default: '5')"
	printf '\t%s\n' "-l, --labels, --no-labels: Print the class names (off by default)"
	printf '\t%s\n' "-f, --fps: The number of frames per second (2 means sample 1 frame per second of video_in). (default: '12')"
	printf '\t%s\n' "-t, --tmp: The tmp directory; must be writable. (default: '"/tmp"')"
	printf '\t%s\n' "-r, --retries: The number of times to retry a failed inference. (default: '3')"
	printf '\t%s\n' "-p, --parallel: The number of concurrent frames to send to the model. (default: '8')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--base)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_base="$2"
				shift
				;;
			--base=*)
				_arg_base="${_key##--base=}"
				;;
			-c|--confidence)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_confidence="$2"
				shift
				;;
			--confidence=*)
				_arg_confidence="${_key##--confidence=}"
				;;
			-c*)
				_arg_confidence="${_key##-c}"
				;;
			-o|--overlap)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_overlap="$2"
				shift
				;;
			--overlap=*)
				_arg_overlap="${_key##--overlap=}"
				;;
			-o*)
				_arg_overlap="${_key##-o}"
				;;
			-s|--stroke)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_stroke="$2"
				shift
				;;
			--stroke=*)
				_arg_stroke="${_key##--stroke=}"
				;;
			-s*)
				_arg_stroke="${_key##-s}"
				;;
			-l|--no-labels|--labels)
				_arg_labels="on"
				test "${1:0:5}" = "--no-" && _arg_labels="off"
				;;
			-l*)
				_arg_labels="on"
				_next="${_key##-l}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-l" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-f|--fps)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_fps="$2"
				shift
				;;
			--fps=*)
				_arg_fps="${_key##--fps=}"
				;;
			-f*)
				_arg_fps="${_key##-f}"
				;;
			-t|--tmp)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_tmp="$2"
				shift
				;;
			--tmp=*)
				_arg_tmp="${_key##--tmp=}"
				;;
			-t*)
				_arg_tmp="${_key##-t}"
				;;
			-r|--retries)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_retries="$2"
				shift
				;;
			--retries=*)
				_arg_retries="${_key##--retries=}"
				;;
			-r*)
				_arg_retries="${_key##-r}"
				;;
			-p|--parallel)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_parallel="$2"
				shift
				;;
			--parallel=*)
				_arg_parallel="${_key##--parallel=}"
				;;
			-p*)
				_arg_parallel="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'model', 'video_in' and 'video_out'"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_model _arg_video_in _arg_video_out "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


printf 'Value of --%s: %s\n' 'base' "$_arg_base"
printf 'Value of --%s: %s\n' 'confidence' "$_arg_confidence"
printf 'Value of --%s: %s\n' 'overlap' "$_arg_overlap"
printf 'Value of --%s: %s\n' 'stroke' "$_arg_stroke"
printf 'Value of --%s: %s\n' 'labels' "$_arg_labels"
printf 'Value of --%s: %s\n' 'fps' "$_arg_fps"
printf 'Value of --%s: %s\n' 'tmp' "$_arg_tmp"
printf 'Value of --%s: %s\n' 'retries' "$_arg_retries"
printf 'Value of --%s: %s\n' 'parallel' "$_arg_parallel"
printf "Value of '%s': %s\\n" 'model' "$_arg_model"
printf "Value of '%s': %s\\n" 'video_in' "$_arg_video_in"
printf "Value of '%s': %s\\n" 'video_out' "$_arg_video_out"

# ] <-- needed because of Argbash
